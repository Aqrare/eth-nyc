/**
 * @param {import('../types').Options} config
 */
export function createName(config: import('../types').Options): {
    publish: (path: string | import("multiformats").CID, options?: (import("ipfs-core-types/dist/src/name").PublishOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("ipfs-core-types/dist/src/name").PublishResult>;
    resolve: (path: string | import("@libp2p/interfaces/dist/src/peer-id").PeerId, options?: (import("ipfs-core-types/dist/src/name").ResolveOptions & import("../types").HTTPClientExtraOptions) | undefined) => AsyncIterable<string>;
    pubsub: {
        cancel: (name: string, options?: (import("ipfs-core-types/dist/src").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("ipfs-core-types/dist/src/name/pubsub").PubsubCancelResult>;
        state: (options?: (import("ipfs-core-types/dist/src").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("ipfs-core-types/dist/src/name/pubsub").PubsubStateResult>;
        subs: (options?: (import("ipfs-core-types/dist/src").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<string[]>;
    };
};
//# sourceMappingURL=index.d.ts.map