/**
 * @param {import('../types').Options} config
 */
export function createConfig(config: import('../types').Options): {
    getAll: (options?: (import("ipfs-core-types/dist/src").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("ipfs-core-types/dist/src/config").Config>;
    get: (key: string, options?: (import("ipfs-core-types/dist/src").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<string | object>;
    set: (key: string, value: any, options?: (import("ipfs-core-types/dist/src").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<void>;
    replace: (config: import("ipfs-core-types/dist/src/config").Config, options?: (import("ipfs-core-types/dist/src").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<void>;
    profiles: {
        apply: (profile: string, options?: (import("ipfs-core-types/dist/src/config/profiles").ProfilesApplyOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("ipfs-core-types/dist/src/config/profiles").ProfilesApplyResult>;
        list: (options?: (import("ipfs-core-types/dist/src").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("ipfs-core-types/dist/src/config/profiles").Profile[]>;
    };
};
//# sourceMappingURL=index.d.ts.map