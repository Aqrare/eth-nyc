/**
 * @param {import('../types').Options} config
 */
export function createPubsub(config: import('../types').Options): {
    ls: (options?: (import("ipfs-core-types/dist/src").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<string[]>;
    peers: (topic: string, options?: (import("ipfs-core-types/dist/src").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("@libp2p/interfaces/dist/src/peer-id").PeerId[]>;
    publish: (topic: string, data: Uint8Array, options?: (import("ipfs-core-types/dist/src").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<void>;
    subscribe: (topic: string, handler: import("@libp2p/interfaces/dist/src/events").EventHandler<import("@libp2p/interfaces/dist/src/pubsub").Message>, options?: (import("ipfs-core-types/dist/src/pubsub").SubscribeOptions & import("../types").HTTPClientExtraOptions & {
        onError?: import("./subscribe.js").ErrorHandlerFn | undefined;
    }) | undefined) => Promise<void>;
    unsubscribe: (topic: string, handler: import("@libp2p/interfaces/dist/src/events").EventHandler<import("@libp2p/interfaces/dist/src/pubsub").Message> | undefined) => Promise<void>;
};
//# sourceMappingURL=index.d.ts.map