interface BasePushable<T> {
    end: (err?: Error) => this;
    push: (value: T) => this;
    next: () => Promise<Next<T>>;
    return: () => {
        done: boolean;
    };
    throw: (err: Error) => {
        done: boolean;
    };
}
export interface Pushable<T> extends AsyncIterable<T>, BasePushable<T> {
}
export interface PushableV<T> extends AsyncIterable<T[]>, BasePushable<T> {
}
export interface Options {
    onEnd?: (err?: Error) => void;
}
interface Next<T> {
    done?: boolean;
    error?: Error;
    value?: T;
}
export declare function pushable<T>(options?: Options): Pushable<T>;
export declare function pushableV<T>(options?: Options): PushableV<T>;
export {};
//# sourceMappingURL=index.d.ts.map