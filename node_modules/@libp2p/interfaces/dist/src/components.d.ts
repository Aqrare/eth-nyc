import type { ConnectionGater, ConnectionProtector } from './connection/index.js';
import type { ContentRouting } from './content-routing/index.js';
import type { AddressManager } from './address-manager/index.js';
import { Startable } from './startable.js';
import type { Metrics } from './metrics/index.js';
import type { PeerId } from './peer-id/index.js';
import type { PeerRouting } from './peer-routing/index.js';
import type { PeerStore } from './peer-store/index.js';
import type { Registrar } from './registrar/index.js';
import type { TransportManager, Upgrader } from './transport/index.js';
import type { Datastore } from 'interface-datastore';
import type { PubSub } from './pubsub/index.js';
import type { DualDHT } from './dht/index.js';
import type { ConnectionManager } from './connection-manager/index.js';
export interface Initializable {
    init: (components: Components) => void;
}
export declare function isInitializable(obj: any): obj is Initializable;
export interface ComponentsInit {
    peerId?: PeerId;
    addressManager?: AddressManager;
    peerStore?: PeerStore;
    upgrader?: Upgrader;
    metrics?: Metrics;
    registrar?: Registrar;
    connectionManager?: ConnectionManager;
    transportManager?: TransportManager;
    connectionGater?: ConnectionGater;
    contentRouting?: ContentRouting;
    peerRouting?: PeerRouting;
    datastore?: Datastore;
    connectionProtector?: ConnectionProtector;
    dht?: DualDHT;
    pubsub?: PubSub;
}
export declare class Components implements Startable {
    private peerId?;
    private addressManager?;
    private peerStore?;
    private upgrader?;
    private metrics?;
    private registrar?;
    private connectionManager?;
    private transportManager?;
    private connectionGater?;
    private contentRouting?;
    private peerRouting?;
    private datastore?;
    private connectionProtector?;
    private dht?;
    private pubsub?;
    private started;
    constructor(init?: ComponentsInit);
    isStarted(): boolean;
    beforeStart(): Promise<void>;
    start(): Promise<void>;
    afterStart(): Promise<void>;
    beforeStop(): Promise<void>;
    stop(): Promise<void>;
    afterStop(): Promise<void>;
    setPeerId(peerId: PeerId): PeerId;
    getPeerId(): PeerId;
    setMetrics(metrics: Metrics): Metrics;
    getMetrics(): Metrics | undefined;
    setAddressManager(addressManager: AddressManager): AddressManager;
    getAddressManager(): AddressManager;
    setPeerStore(peerStore: PeerStore): PeerStore;
    getPeerStore(): PeerStore;
    setUpgrader(upgrader: Upgrader): Upgrader;
    getUpgrader(): Upgrader;
    setRegistrar(registrar: Registrar): Registrar;
    getRegistrar(): Registrar;
    setConnectionManager(connectionManager: ConnectionManager): ConnectionManager;
    getConnectionManager(): ConnectionManager;
    setTransportManager(transportManager: TransportManager): TransportManager;
    getTransportManager(): TransportManager;
    setConnectionGater(connectionGater: ConnectionGater): ConnectionGater;
    getConnectionGater(): ConnectionGater;
    setContentRouting(contentRouting: ContentRouting): ContentRouting;
    getContentRouting(): ContentRouting;
    setPeerRouting(peerRouting: PeerRouting): PeerRouting;
    getPeerRouting(): PeerRouting;
    setDatastore(datastore: Datastore): Datastore;
    getDatastore(): Datastore;
    setConnectionProtector(connectionProtector: ConnectionProtector): ConnectionProtector;
    getConnectionProtector(): ConnectionProtector | undefined;
    setDHT(dht: DualDHT): DualDHT;
    getDHT(): DualDHT;
    setPubSub(pubsub: PubSub): PubSub<import("./pubsub/index.js").PubSubEvents>;
    getPubSub(): PubSub;
}
//# sourceMappingURL=components.d.ts.map